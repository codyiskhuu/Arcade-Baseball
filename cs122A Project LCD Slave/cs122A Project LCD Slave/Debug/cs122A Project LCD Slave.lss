
cs122A Project LCD Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000350  000003e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000350  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080010e  0080010e  000003f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de3  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000979  00000000  00000000  00001307  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e4  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00002264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000612  00000000  00000000  00002408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000032f  00000000  00000000  00002a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002d49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	93 c0       	rjmp	.+294    	; 0x15c <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	43 c0       	rjmp	.+134    	; 0xd4 <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e5       	ldi	r30, 0x50	; 80
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 32       	cpi	r26, 0x21	; 33
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f6 d0       	rcall	.+492    	; 0x2b0 <main>
  c4:	43 c1       	rjmp	.+646    	; 0x34c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SPI_SlaveInit>:
void LCD_On(){
	PORTB = 0x01;
}

void LCD_Off(){
	PORTB = 0x00;
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	80 ec       	ldi	r24, 0xC0	; 192
  ce:	8c bd       	out	0x2c, r24	; 44
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <__vector_19>:
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	8e b5       	in	r24, 0x2e	; 46
  e2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <receivedData>
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <TimerSet>:
  f2:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
  f6:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  fe:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 102:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <_avr_timer_cntcurr>
 106:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <_avr_timer_cntcurr+0x1>
 10a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_avr_timer_cntcurr+0x2>
 10e:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <_avr_timer_cntcurr+0x3>
 112:	08 95       	ret

00000114 <TimerOn>:
 114:	8b e0       	ldi	r24, 0x0B	; 11
 116:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 11a:	8d e7       	ldi	r24, 0x7D	; 125
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 122:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 12c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 130:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 138:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 140:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 144:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_avr_timer_cntcurr>
 148:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <_avr_timer_cntcurr+0x1>
 14c:	a0 93 1b 01 	sts	0x011B, r26	; 0x80011b <_avr_timer_cntcurr+0x2>
 150:	b0 93 1c 01 	sts	0x011C, r27	; 0x80011c <_avr_timer_cntcurr+0x3>
 154:	8f b7       	in	r24, 0x3f	; 63
 156:	80 68       	ori	r24, 0x80	; 128
 158:	8f bf       	out	0x3f, r24	; 63
 15a:	08 95       	ret

0000015c <__vector_13>:
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <_avr_timer_cntcurr>
 172:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <_avr_timer_cntcurr+0x1>
 176:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <_avr_timer_cntcurr+0x2>
 17a:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <_avr_timer_cntcurr+0x3>
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	a1 09       	sbc	r26, r1
 182:	b1 09       	sbc	r27, r1
 184:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_avr_timer_cntcurr>
 188:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <_avr_timer_cntcurr+0x1>
 18c:	a0 93 1b 01 	sts	0x011B, r26	; 0x80011b <_avr_timer_cntcurr+0x2>
 190:	b0 93 1c 01 	sts	0x011C, r27	; 0x80011c <_avr_timer_cntcurr+0x3>
 194:	89 2b       	or	r24, r25
 196:	8a 2b       	or	r24, r26
 198:	8b 2b       	or	r24, r27
 19a:	99 f4       	brne	.+38     	; 0x1c2 <__vector_13+0x66>
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <TimerFlag>
 1a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1ae:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1b2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_avr_timer_cntcurr>
 1b6:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <_avr_timer_cntcurr+0x1>
 1ba:	a0 93 1b 01 	sts	0x011B, r26	; 0x80011b <_avr_timer_cntcurr+0x2>
 1be:	b0 93 1c 01 	sts	0x011C, r27	; 0x80011c <_avr_timer_cntcurr+0x3>
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <delay_ms>:
 1d4:	18 16       	cp	r1, r24
 1d6:	19 06       	cpc	r1, r25
 1d8:	5c f0       	brlt	.+22     	; 0x1f0 <delay_ms+0x1c>
 1da:	08 95       	ret
 1dc:	00 00       	nop
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	31 09       	sbc	r19, r1
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <delay_ms+0x8>
 1e4:	4f 5f       	subi	r20, 0xFF	; 255
 1e6:	5f 4f       	sbci	r21, 0xFF	; 255
 1e8:	84 17       	cp	r24, r20
 1ea:	95 07       	cpc	r25, r21
 1ec:	19 f4       	brne	.+6      	; 0x1f4 <delay_ms+0x20>
 1ee:	08 95       	ret
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	27 e0       	ldi	r18, 0x07	; 7
 1f6:	33 e0       	ldi	r19, 0x03	; 3
 1f8:	f1 cf       	rjmp	.-30     	; 0x1dc <delay_ms+0x8>

000001fa <LCD_WriteCommand>:
 1fa:	13 98       	cbi	0x02, 3	; 2
 1fc:	8b b9       	out	0x0b, r24	; 11
 1fe:	14 9a       	sbi	0x02, 4	; 2
 200:	00 00       	nop
 202:	14 98       	cbi	0x02, 4	; 2
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	e5 cf       	rjmp	.-54     	; 0x1d4 <delay_ms>
 20a:	08 95       	ret

0000020c <LCD_init>:
 20c:	84 e6       	ldi	r24, 0x64	; 100
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	e1 df       	rcall	.-62     	; 0x1d4 <delay_ms>
 212:	88 e3       	ldi	r24, 0x38	; 56
 214:	f2 df       	rcall	.-28     	; 0x1fa <LCD_WriteCommand>
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	f0 df       	rcall	.-32     	; 0x1fa <LCD_WriteCommand>
 21a:	8f e0       	ldi	r24, 0x0F	; 15
 21c:	ee df       	rcall	.-36     	; 0x1fa <LCD_WriteCommand>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	ec df       	rcall	.-40     	; 0x1fa <LCD_WriteCommand>
 222:	8a e0       	ldi	r24, 0x0A	; 10
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	d6 cf       	rjmp	.-84     	; 0x1d4 <delay_ms>
 228:	08 95       	ret

0000022a <LCD_WriteData>:
 22a:	13 9a       	sbi	0x02, 3	; 2
 22c:	8b b9       	out	0x0b, r24	; 11
 22e:	14 9a       	sbi	0x02, 4	; 2
 230:	00 00       	nop
 232:	14 98       	cbi	0x02, 4	; 2
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	cd cf       	rjmp	.-102    	; 0x1d4 <delay_ms>
 23a:	08 95       	ret

0000023c <LCD_Cursor>:
 23c:	81 31       	cpi	r24, 0x11	; 17
 23e:	18 f4       	brcc	.+6      	; 0x246 <LCD_Cursor+0xa>
 240:	81 58       	subi	r24, 0x81	; 129
 242:	db cf       	rjmp	.-74     	; 0x1fa <LCD_WriteCommand>
 244:	08 95       	ret
 246:	81 55       	subi	r24, 0x51	; 81
 248:	d8 cf       	rjmp	.-80     	; 0x1fa <LCD_WriteCommand>
 24a:	08 95       	ret

0000024c <LCD_DisplayString>:
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	fb 01       	movw	r30, r22
 254:	90 81       	ld	r25, Z
 256:	99 23       	and	r25, r25
 258:	51 f0       	breq	.+20     	; 0x26e <LCD_DisplayString+0x22>
 25a:	eb 01       	movw	r28, r22
 25c:	11 e0       	ldi	r17, 0x01	; 1
 25e:	18 0f       	add	r17, r24
 260:	ed df       	rcall	.-38     	; 0x23c <LCD_Cursor>
 262:	89 91       	ld	r24, Y+
 264:	e2 df       	rcall	.-60     	; 0x22a <LCD_WriteData>
 266:	81 2f       	mov	r24, r17
 268:	98 81       	ld	r25, Y
 26a:	91 11       	cpse	r25, r1
 26c:	f7 cf       	rjmp	.-18     	; 0x25c <LCD_DisplayString+0x10>
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	08 95       	ret

00000276 <SMLCD>:
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	91 05       	cpc	r25, r1
 27a:	49 f0       	breq	.+18     	; 0x28e <SMLCD+0x18>
 27c:	1c f4       	brge	.+6      	; 0x284 <SMLCD+0xe>
 27e:	89 2b       	or	r24, r25
 280:	89 f0       	breq	.+34     	; 0x2a4 <SMLCD+0x2e>
 282:	02 c0       	rjmp	.+4      	; 0x288 <SMLCD+0x12>
 284:	04 97       	sbiw	r24, 0x04	; 4
 286:	74 f0       	brlt	.+28     	; 0x2a4 <SMLCD+0x2e>
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	08 95       	ret
 28e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <receivedData>
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	51 f0       	breq	.+20     	; 0x2aa <SMLCD+0x34>
 296:	64 e0       	ldi	r22, 0x04	; 4
 298:	71 e0       	ldi	r23, 0x01	; 1
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	d7 df       	rcall	.-82     	; 0x24c <LCD_DisplayString>
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	08 95       	ret
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	08 95       	ret
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	08 95       	ret

000002b0 <main>:
//////////////////////////////////////////////////////////////////////////

int main(void)
{
	
	DDRA = 0xFF; PORTA = 0x00;//slave //will as a output rn
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	81 b9       	out	0x01, r24	; 1
 2b4:	12 b8       	out	0x02, r1	; 2
	//DDRB = 0x00; PORTB = 0xFF;//Input for the Sensor //at the moment we are using a button
	//DDRC = 0xF0; PORTC = 0x0F;//keypad
	DDRD = 0xFF; PORTD = 0x00;//lcd data bus
 2b6:	8a b9       	out	0x0a, r24	; 10
 2b8:	1b b8       	out	0x0b, r1	; 11
	task *tasks[] = { &task1};//, &task2};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	
	//task1 - for the sensor input
	task1.state = screen_Init;
 2ba:	ee e0       	ldi	r30, 0x0E	; 14
 2bc:	f1 e0       	ldi	r31, 0x01	; 1
 2be:	10 82       	st	Z, r1
	task1.period = 100;
 2c0:	84 e6       	ldi	r24, 0x64	; 100
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	a0 e0       	ldi	r26, 0x00	; 0
 2c6:	b0 e0       	ldi	r27, 0x00	; 0
 2c8:	81 83       	std	Z+1, r24	; 0x01
 2ca:	92 83       	std	Z+2, r25	; 0x02
 2cc:	a3 83       	std	Z+3, r26	; 0x03
 2ce:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = task1.period;
 2d0:	85 83       	std	Z+5, r24	; 0x05
 2d2:	96 83       	std	Z+6, r25	; 0x06
 2d4:	a7 83       	std	Z+7, r26	; 0x07
 2d6:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &SMLCD;
 2d8:	8b e3       	ldi	r24, 0x3B	; 59
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	92 87       	std	Z+10, r25	; 0x0a
 2de:	81 87       	std	Z+9, r24	; 0x09


/*Initializations*/
	TimerSet(100);
 2e0:	64 e6       	ldi	r22, 0x64	; 100
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	04 df       	rcall	.-504    	; 0xf2 <TimerSet>
	TimerOn();
 2ea:	14 df       	rcall	.-472    	; 0x114 <TimerOn>
	SPI_SlaveInit();
 2ec:	ed de       	rcall	.-550    	; 0xc8 <SPI_SlaveInit>
 2ee:	8e df       	rcall	.-228    	; 0x20c <LCD_init>
	LCD_init();
 2f0:	ce e0       	ldi	r28, 0x0E	; 14
 2f2:	d1 e0       	ldi	r29, 0x01	; 1

	unsigned short i;
	while(1){
		for (i = 0; i < numTasks; i++){
			if (tasks[i]->elapsedTime == tasks[i]->period){
 2f4:	4d 81       	ldd	r20, Y+5	; 0x05
 2f6:	5e 81       	ldd	r21, Y+6	; 0x06
 2f8:	6f 81       	ldd	r22, Y+7	; 0x07
 2fa:	78 85       	ldd	r23, Y+8	; 0x08
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	9a 81       	ldd	r25, Y+2	; 0x02
 300:	ab 81       	ldd	r26, Y+3	; 0x03
 302:	bc 81       	ldd	r27, Y+4	; 0x04
 304:	48 17       	cp	r20, r24
 306:	59 07       	cpc	r21, r25
 308:	6a 07       	cpc	r22, r26
 30a:	7b 07       	cpc	r23, r27
 30c:	61 f4       	brne	.+24     	; 0x326 <main+0x76>
 30e:	88 81       	ld	r24, Y
 310:	e9 85       	ldd	r30, Y+9	; 0x09
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 312:	fa 85       	ldd	r31, Y+10	; 0x0a
 314:	08 2e       	mov	r0, r24
 316:	00 0c       	add	r0, r0
 318:	99 0b       	sbc	r25, r25
 31a:	09 95       	icall
 31c:	88 83       	st	Y, r24
 31e:	1d 82       	std	Y+5, r1	; 0x05
 320:	1e 82       	std	Y+6, r1	; 0x06
				tasks[i]->elapsedTime = 0;
 322:	1f 82       	std	Y+7, r1	; 0x07
 324:	18 86       	std	Y+8, r1	; 0x08
 326:	8d 81       	ldd	r24, Y+5	; 0x05
 328:	9e 81       	ldd	r25, Y+6	; 0x06
			}
			tasks[i]->elapsedTime += 100; //value is gcd
 32a:	af 81       	ldd	r26, Y+7	; 0x07
 32c:	b8 85       	ldd	r27, Y+8	; 0x08
 32e:	8c 59       	subi	r24, 0x9C	; 156
 330:	9f 4f       	sbci	r25, 0xFF	; 255
 332:	af 4f       	sbci	r26, 0xFF	; 255
 334:	bf 4f       	sbci	r27, 0xFF	; 255
 336:	8d 83       	std	Y+5, r24	; 0x05
 338:	9e 83       	std	Y+6, r25	; 0x06
 33a:	af 83       	std	Y+7, r26	; 0x07
 33c:	b8 87       	std	Y+8, r27	; 0x08
 33e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <TimerFlag>
		}
		while(!TimerFlag);
 342:	88 23       	and	r24, r24
 344:	e1 f3       	breq	.-8      	; 0x33e <main+0x8e>
 346:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <TimerFlag>
		TimerFlag = 0;
 34a:	d4 cf       	rjmp	.-88     	; 0x2f4 <main+0x44>

0000034c <_exit>:
 34c:	f8 94       	cli

0000034e <__stop_program>:
		
		
	}
 34e:	ff cf       	rjmp	.-2      	; 0x34e <__stop_program>
