
122A Project Motion Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000302  00000396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800104  00800104  0000039a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df9  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000977  00000000  00000000  000012c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000638  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00002274  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000622  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c1  00000000  00000000  00002a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002cfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	db c0       	rjmp	.+438    	; 0x1ec <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8b c0       	rjmp	.+278    	; 0x164 <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e0       	ldi	r30, 0x02	; 2
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 31       	cpi	r26, 0x18	; 24
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d0 d0       	rcall	.+416    	; 0x264 <main>
  c4:	1c c1       	rjmp	.+568    	; 0x2fe <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SPI_MasterInit>:
void LCD_On(){
	PORTB = 0x01;
}

void LCD_Off(){
	PORTB = 0x00;
  c8:	80 eb       	ldi	r24, 0xB0	; 176
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	81 e5       	ldi	r24, 0x51	; 81
  ce:	8c bd       	out	0x2c, r24	; 44
  d0:	08 95       	ret

000000d2 <SPI_MasterTransmit>:
  d2:	8e bd       	out	0x2e, r24	; 46
  d4:	2c 98       	cbi	0x05, 4	; 5
  d6:	0d b4       	in	r0, 0x2d	; 45
  d8:	07 fe       	sbrs	r0, 7
  da:	fd cf       	rjmp	.-6      	; 0xd6 <SPI_MasterTransmit+0x4>
  dc:	2c 9a       	sbi	0x05, 4	; 5
  de:	08 95       	ret

000000e0 <SMSensor>:
  e0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	61 f0       	breq	.+24     	; 0x100 <SMSensor+0x20>
  e8:	28 f0       	brcs	.+10     	; 0xf4 <SMSensor+0x14>
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	b1 f0       	breq	.+44     	; 0x11a <SMSensor+0x3a>
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	31 f1       	breq	.+76     	; 0x13e <SMSensor+0x5e>
  f2:	35 c0       	rjmp	.+106    	; 0x15e <SMSensor+0x7e>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <state>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	08 95       	ret
 100:	18 9b       	sbis	0x03, 0	; 3
 102:	06 c0       	rjmp	.+12     	; 0x110 <SMSensor+0x30>
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <state>
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	e2 df       	rcall	.-60     	; 0xd2 <SPI_MasterTransmit>
 10e:	01 c0       	rjmp	.+2      	; 0x112 <SMSensor+0x32>
 110:	83 b1       	in	r24, 0x03	; 3
 112:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state>
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	08 95       	ret
 11a:	18 9b       	sbis	0x03, 0	; 3
 11c:	06 c0       	rjmp	.+12     	; 0x12a <SMSensor+0x4a>
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	82 b9       	out	0x02, r24	; 2
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <state>
 128:	06 c0       	rjmp	.+12     	; 0x136 <SMSensor+0x56>
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	d2 df       	rcall	.-92     	; 0xd2 <SPI_MasterTransmit>
 12e:	12 b8       	out	0x02, r1	; 2
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <state>
 136:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state>
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	08 95       	ret
 13e:	19 9b       	sbis	0x03, 1	; 3
 140:	06 c0       	rjmp	.+12     	; 0x14e <SMSensor+0x6e>
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	82 b9       	out	0x02, r24	; 2
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <state>
 14c:	04 c0       	rjmp	.+8      	; 0x156 <SMSensor+0x76>
 14e:	12 b8       	out	0x02, r1	; 2
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <state>
 156:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state>
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	08 95       	ret
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	08 95       	ret

00000164 <__vector_19>:
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
 170:	8e b5       	in	r24, 0x2e	; 46
 172:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <receivedData>
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <TimerSet>:
 182:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 186:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 18a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 18e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 192:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <_avr_timer_cntcurr>
 196:	70 93 10 01 	sts	0x0110, r23	; 0x800110 <_avr_timer_cntcurr+0x1>
 19a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr+0x2>
 19e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x3>
 1a2:	08 95       	ret

000001a4 <TimerOn>:
 1a4:	8b e0       	ldi	r24, 0x0B	; 11
 1a6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1aa:	8d e7       	ldi	r24, 0x7D	; 125
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1bc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1c0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1cc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1d0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1d4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 1d8:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 1dc:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 1e0:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 1e4:	8f b7       	in	r24, 0x3f	; 63
 1e6:	80 68       	ori	r24, 0x80	; 128
 1e8:	8f bf       	out	0x3f, r24	; 63
 1ea:	08 95       	ret

000001ec <__vector_13>:
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
 1fe:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_avr_timer_cntcurr>
 202:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x1>
 206:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <_avr_timer_cntcurr+0x2>
 20a:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x3>
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	a1 09       	sbc	r26, r1
 212:	b1 09       	sbc	r27, r1
 214:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 218:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 21c:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 220:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 224:	89 2b       	or	r24, r25
 226:	8a 2b       	or	r24, r26
 228:	8b 2b       	or	r24, r27
 22a:	99 f4       	brne	.+38     	; 0x252 <__vector_13+0x66>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <TimerFlag>
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 236:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 23a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 23e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 242:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 246:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 24a:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 24e:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 252:	bf 91       	pop	r27
 254:	af 91       	pop	r26
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <main>:
//////////////////////////////////////////////////////////////////////////

int main(void)
{

	DDRA = 0xFF; PORTA = 0x00;//slave //will as a output rn
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	81 b9       	out	0x01, r24	; 1
 268:	12 b8       	out	0x02, r1	; 2
	DDRB = 0x00; PORTB = 0xFF;//Input for the Sensor //at the moment we are using a button
 26a:	14 b8       	out	0x04, r1	; 4
 26c:	85 b9       	out	0x05, r24	; 5
	task *tasks[] = { &task1};//, &task2};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	
	//task1 - for the sensor input
	task1.state = sensor_Init;
 26e:	e4 e0       	ldi	r30, 0x04	; 4
 270:	f1 e0       	ldi	r31, 0x01	; 1
 272:	10 82       	st	Z, r1
	task1.period = 100;
 274:	84 e6       	ldi	r24, 0x64	; 100
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	a0 e0       	ldi	r26, 0x00	; 0
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	81 83       	std	Z+1, r24	; 0x01
 27e:	92 83       	std	Z+2, r25	; 0x02
 280:	a3 83       	std	Z+3, r26	; 0x03
 282:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = task1.period;
 284:	85 83       	std	Z+5, r24	; 0x05
 286:	96 83       	std	Z+6, r25	; 0x06
 288:	a7 83       	std	Z+7, r26	; 0x07
 28a:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &SMSensor;
 28c:	80 e7       	ldi	r24, 0x70	; 112
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	92 87       	std	Z+10, r25	; 0x0a
 292:	81 87       	std	Z+9, r24	; 0x09

/*Initializations*/
	TimerSet(100);
 294:	64 e6       	ldi	r22, 0x64	; 100
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	72 df       	rcall	.-284    	; 0x182 <TimerSet>
	TimerOn();
 29e:	82 df       	rcall	.-252    	; 0x1a4 <TimerOn>
	SPI_MasterInit();
 2a0:	13 df       	rcall	.-474    	; 0xc8 <SPI_MasterInit>
 2a2:	c4 e0       	ldi	r28, 0x04	; 4

//////////////////////////////////////////////////////////////////////////
	unsigned short i;
	while(1){
		for (i = 0; i < numTasks; i++){
			if (tasks[i]->elapsedTime == tasks[i]->period){
 2a4:	d1 e0       	ldi	r29, 0x01	; 1
 2a6:	4d 81       	ldd	r20, Y+5	; 0x05
 2a8:	5e 81       	ldd	r21, Y+6	; 0x06
 2aa:	6f 81       	ldd	r22, Y+7	; 0x07
 2ac:	78 85       	ldd	r23, Y+8	; 0x08
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	9a 81       	ldd	r25, Y+2	; 0x02
 2b2:	ab 81       	ldd	r26, Y+3	; 0x03
 2b4:	bc 81       	ldd	r27, Y+4	; 0x04
 2b6:	48 17       	cp	r20, r24
 2b8:	59 07       	cpc	r21, r25
 2ba:	6a 07       	cpc	r22, r26
 2bc:	7b 07       	cpc	r23, r27
 2be:	61 f4       	brne	.+24     	; 0x2d8 <main+0x74>
 2c0:	88 81       	ld	r24, Y
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 2c2:	e9 85       	ldd	r30, Y+9	; 0x09
 2c4:	fa 85       	ldd	r31, Y+10	; 0x0a
 2c6:	08 2e       	mov	r0, r24
 2c8:	00 0c       	add	r0, r0
 2ca:	99 0b       	sbc	r25, r25
 2cc:	09 95       	icall
 2ce:	88 83       	st	Y, r24
 2d0:	1d 82       	std	Y+5, r1	; 0x05
				tasks[i]->elapsedTime = 0;
 2d2:	1e 82       	std	Y+6, r1	; 0x06
 2d4:	1f 82       	std	Y+7, r1	; 0x07
 2d6:	18 86       	std	Y+8, r1	; 0x08
 2d8:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			tasks[i]->elapsedTime += 100; //value is gcd
 2da:	9e 81       	ldd	r25, Y+6	; 0x06
 2dc:	af 81       	ldd	r26, Y+7	; 0x07
 2de:	b8 85       	ldd	r27, Y+8	; 0x08
 2e0:	8c 59       	subi	r24, 0x9C	; 156
 2e2:	9f 4f       	sbci	r25, 0xFF	; 255
 2e4:	af 4f       	sbci	r26, 0xFF	; 255
 2e6:	bf 4f       	sbci	r27, 0xFF	; 255
 2e8:	8d 83       	std	Y+5, r24	; 0x05
 2ea:	9e 83       	std	Y+6, r25	; 0x06
 2ec:	af 83       	std	Y+7, r26	; 0x07
 2ee:	b8 87       	std	Y+8, r27	; 0x08
 2f0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <TimerFlag>
		}
		while(!TimerFlag);
 2f4:	88 23       	and	r24, r24
 2f6:	e1 f3       	breq	.-8      	; 0x2f0 <main+0x8c>
 2f8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <TimerFlag>
		TimerFlag = 0;
 2fc:	d4 cf       	rjmp	.-88     	; 0x2a6 <main+0x42>

000002fe <_exit>:
		
		
	}
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
